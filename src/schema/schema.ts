import { Field } from '../fields/exports';
import { IField } from '../fields/field';
import { Report, SchemaReport } from '../reports/exports';
import { RequiredValidator } from '../validators/exports';


export interface SchemaDef {
	[key: string]: Field | Schema
}


export class Schema implements IField {
	private _schema: SchemaDef
	validators: [RequiredValidator] = [new RequiredValidator(true)]

	constructor(schemaDef: SchemaDef, requiredMessage?: string) {
		this._schema = schemaDef
		this.required(requiredMessage)
	}

	get toJSON() {
		return JSON.stringify(this._schema)
	}

	get requiredValidator(): RequiredValidator {
		return this.validators[0]
	}

	get isRequired(): boolean {
		return this.requiredValidator.required ?? false
	}

	get challenge(): SchemaDef {
		return this._schema
	}

	static fromJSON(json: { [key: string]: any } | string): Schema {

		try {
			if (typeof json === "string") {
				json = JSON.parse(json)
			}
			let schemaDef: SchemaDef = {}
			Object.entries(json).forEach(([fieldname, _field]) => {
				if (_field._schema) {
					const field = (_field as Schema)
					const schema = Schema.fromJSON(field._schema)
					const fieldRequired = field.validators[0]
					schema.setValidators([new RequiredValidator(fieldRequired.challenge, fieldRequired.message)])
					schemaDef[fieldname] = schema
				} else {
					schemaDef[fieldname] = Field.parse(_field)
				}
			});
			return new Schema(schemaDef)
		} catch (error) {
			throw new Error(`Cannot parsing schema : submited structure does not represent a valid string of schema definition. Please make sure that the definition submitted was generated by the Schema class\n${JSON.stringify(json)}`)
		}
	}

	required(message?: string) {
		this.validators = [new RequiredValidator(true, message)]
		return this
	}

	setValidators(validators: [RequiredValidator]) {
		this.validators = validators
		return this
	}

	validate(data?: { [key: string]: any }): boolean {
		if (data) {
			return Object.entries(this._schema)
				.every(
					([fieldname, field]) => field.validate(data[fieldname]) ?? false
				)
		} else if (this.isRequired) {
			return false
		} else {
			return true
		}
	}

	report(data?: any): SchemaReport | Report[] {
		if (data) {
			let report: SchemaReport = {}
			Object.entries(this._schema).forEach(
				([fieldname, field]) => {
					report[fieldname] = field.report(data[fieldname])
				})
			return report
		} else {
			return [this.requiredValidator.report(data)]
		}
	}
}
